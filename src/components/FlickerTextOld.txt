import React from "react";
import { useState, useEffect } from "react";

// Props: start = text that the flicker text should initially display as
export default function FlickerTextOld(props) {
  const [displayText, setDisplayText] = useState(props.start);

  const transitionChars = ["▓", "▒", "░"];

  const phrases = ["Software Developer", "Innovator", "Idea Realizer", "Expert Communicator", "Hard Worker"];

  const timer = (ms) => new Promise((res) => setTimeout(res, ms));

  useEffect(() => {
    const interval = setInterval(() => {
      scrambleTransition();
    }, 3000);
    return () => clearInterval(interval);
  });


  async function scrambleTransition() {
    // Finding the current phrase and the target phrase
    let currPhrase = displayText;
    let targetPhrase = phrases[Math.floor(Math.random() * phrases.length)];

    // Finding the difference in length between the two phrases
    let differenceInLength = targetPhrase.length - currPhrase.length;

    // Converting the phrase to transition characters one at a time, at random indexes
    let currPhraseIndexList = Array.from(Array(currPhrase.length).keys());
    let currPhraseAsArr = [...currPhrase];
    while (currPhraseIndexList.length > 0) {
      let randomIndexIndex = Math.floor(
        Math.random() * currPhraseIndexList.length
      ); // Getting the index for the index list
      let randomIndex = currPhraseIndexList[randomIndexIndex]; // Getting random index from the list of indexes
      let randomTransitionChar =
        transitionChars[Math.floor(Math.random() * transitionChars.length)];

      currPhraseAsArr[randomIndex] = randomTransitionChar;

      setDisplayText(currPhraseAsArr.join(""));
      currPhraseIndexList.splice(randomIndexIndex, 1);

      await timer(50);
    }

    // Converting the phrase from transition characters to the next phrase

    // Getting the transition phrase and new phrase to be the same length
    let transitionPhrase = currPhraseAsArr.join("");
    console.log(differenceInLength)
    if (differenceInLength > 0) {
      transitionPhrase = transitionPhrase + " ".repeat(differenceInLength);
    }
    if (differenceInLength < 0) {
      transitionPhrase = transitionPhrase.substring(
        0,
        transitionPhrase.length + differenceInLength
      );
    }

    // Converting transition phrase to new phrase one character at a time
    let targetPhraseIndexList = Array.from(Array(targetPhrase.length).keys());
    let transitionPhraseAsArr = [...transitionPhrase];
    while (targetPhraseIndexList.length > 0) {
      let randomIndexIndex = Math.floor(
        Math.random() * targetPhraseIndexList.length
      );
      let randomIndex = targetPhraseIndexList[randomIndexIndex];
      let replacementChar = targetPhrase.charAt(randomIndex);
      transitionPhraseAsArr[randomIndex] = replacementChar;

      setDisplayText(transitionPhraseAsArr.join(""));
      targetPhraseIndexList.splice(randomIndexIndex, 1);

      await timer(50);
    }
  }

  return <div> {displayText} </div>;
}
